# This file now references variables from your .env file

services:
  # Our custom-built PostgreSQL Database Service
  postgres_db:
    build: ./postgres
    container_name: postgres_database
    environment:
      # These values are now read from your .env file
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

  # The pgAdmin web interface for managing the database
  postgres_ui:
    image: dpage/pgadmin4
    container_name: postgres_ui
    environment:
      # These values are now read from your .env file
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}
    ports:
      - "8080:80"
    depends_on:
      - postgres_db

  # Our custom backend API Server
  api:
    build: .
    container_name: wayline_api
    ports:
      - "5000:5000"
    volumes:
      - .:/app
    depends_on:
      postgres_db:
        condition: service_healthy
    # We now pass environment variables into our Node.js application
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=postgres_db # The host is still the service name
      - OPENCAGE_API_KEY=${OPENCAGE_API_KEY}

  # The high-performance routing engine
  routing_engine:
    image: osrm/osrm-backend:latest
    container_name: osrm_router
    ports:
      - "5001:5000"
    volumes:
      - ./data:/data
    command: osrm-routed --algorithm mld /data/southern-zone-latest.osrm

volumes:
  postgres_data: